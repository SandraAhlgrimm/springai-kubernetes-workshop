spring:
  application:
    name: recipe-agent
  
  # Spring AI Configuration
  ai:
    ollama:
      base-url: ${OLLAMA_URL:http://localhost:11434}
      chat:
        enabled: true
        options:
          model: qwen3:1.7b
          temperature: 0.7
          num-ctx: 4096
      embedding:
        enabled: true
        options:
          model: nomic-embed-text
    
    vectorstore:
      redis:
        uri: ${REDIS_URL:redis://localhost:6379}
        index: recipe-vectors
        prefix: "doc:"
        initialize-schema: true
        index-type: HNSW
        embedding-dimension: 1536
        distance-metric: COSINE
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 3s
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: 3s

# Resilience4j Configuration
resilience4j:
  # Circuit Breaker
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 5s
        permitted-number-of-calls-in-half-open-state: 3
        max-wait-duration-in-half-open-state: 0
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        minimum-number-of-calls: 5
        wait-duration-in-open-state: 60s
        automatic-transition-from-open-to-half-open-enabled: true
        record-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
          - java.lang.IllegalStateException
    instances:
      llm:
        base-config: default
        wait-duration-in-open-state: 60s
      vectorstore:
        base-config: default
        wait-duration-in-open-state: 30s
      external-api:
        base-config: default
  
  # Retry
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 1s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.SocketTimeoutException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
    instances:
      llm:
        base-config: default
        max-attempts: 3
      vectorstore:
        base-config: default
        max-attempts: 2
      fast-retry:
        max-attempts: 2
        wait-duration: 500ms
  
  # Rate Limiter
  ratelimiter:
    configs:
      default:
        timeout-duration: 0s
        limit-refresh-period: 1m
        limit-for-period: 10
    instances:
      user-tier:
        base-config: default
        limit-for-period: 10
        limit-refresh-period: 1m
      premium-tier:
        limit-for-period: 50
        limit-refresh-period: 1m
        timeout-duration: 1s
      global-tier:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 100ms
  
  # Time Limiter
  timelimiter:
    configs:
      default:
        timeout-duration: 30s
        cancel-running-future: true
    instances:
      llm:
        timeout-duration: 30s
      vectorstore:
        timeout-duration: 5s
  
  # Bulkhead (thread pool isolation)
  bulkhead:
    configs:
      default:
        max-concurrent-calls: 10
        max-wait-duration: 500ms
    instances:
      llm:
        max-concurrent-calls: 5
      vectorstore:
        max-concurrent-calls: 10

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,ratelimiters
      base-path: /actuator
  
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${ENVIRONMENT:development}
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
  
  tracing:
    sampling:
      probability: ${TRACING_PROBABILITY:1.0}

# Logging
logging:
  level:
    root: INFO
    com.example.agent: DEBUG
    org.springframework.ai: DEBUG
    io.github.resilience4j: DEBUG
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss} - %msg%n'
    file: '%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n'
  file:
    name: logs/agent.log
    max-size: 10MB
    max-history: 30

# Server Configuration
server:
  port: ${PORT:8080}
  compression:
    enabled: true
    mime-types: application/json,text/html,text/xml,text/plain
  
  error:
    include-message: always
    include-stacktrace: on_param

# Application-Specific Configuration
agent:
  memory:
    max-context-tokens: 4096
    session-ttl-hours: 24
    cleanup-interval-minutes: 60
  
  mcp:
    server:
      enabled: true
      base-path: /mcp
      name: recipe-finder-mcp
      version: 1.0.0
  
  features:
    multi-agent: true
    conversation-memory: true
    vector-search: true
    streaming: true
  
  rate-limits:
    free-tier:
      requests-per-minute: 10
      max-conversation-length: 20
    premium-tier:
      requests-per-minute: 50
      max-conversation-length: 100
  
  cost-tracking:
    enabled: true
    alert-threshold-dollars: 100

# Profile-Specific Configuration
---
spring:
  config:
    activate:
      on-profile: production

logging:
  level:
    root: WARN
    com.example.agent: INFO
    org.springframework.ai: INFO

management:
  tracing:
    sampling:
      probability: 0.1

agent:
  features:
    debug-mode: false

---
spring:
  config:
    activate:
      on-profile: test

spring:
  ai:
    ollama:
      base-url: http://localhost:11434
  data:
    redis:
      host: localhost
      port: 6379

resilience4j:
  circuitbreaker:
    configs:
      default:
        wait-duration-in-open-state: 10s
  retry:
    configs:
      default:
        max-attempts: 1
